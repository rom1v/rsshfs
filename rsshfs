#!/bin/bash
# Reverse sshfs (GPLv3)
#
# Usage:
#   rsshfs --help
#
# Romain Vimont (Â®om) <rom@rom1v.com>
# Cedric Rochat <rochatc@gmail.com>

quote() {
	[[ $# != 0 ]] && printf '%q ' "$@" | sed 's/.$//'
}

help() {
	cat << EOF
Reverse SSH-mount a local directory to a remote node, without having to use an SSH tunnel.

Usage:
	MOUNT
	=====
	$0 [OPTION]... <localpath> <remotehost>:<remotepath>

	UMOUNT
	======
	$0 -u [OPTION]... <remotehost>:<remotepath>

	OPTION
	======
	-d,	--daemon					Daemon like. In case of MOUNT, it simply puts the process in background.
	-u,	--umount					Unmount.
	-h,	--help						Print this help page.
	-q,	--quiet						Be quiet.
	-v,	--verbose					Be verbose.
	-F [SSH_CONFIG_FILE]					Specify a SSH alternative per-user configuration file.
	-o [OPT]						Add subprogram specific option. i.e. You can pass any SSH option here, like
									-o IdentityFile=/path/to/your/ssh/private_key
									-o StrictHostKeyChecking=no
									...
									You can also pass any SSHFS option, like
									-o cache=no
									...
		ro						Mount in read-only mode.
EOF
}

LOCAL_PATH=""
REMOTE_HOST=""
REMOTE_PATH=""
SSH_ARGS=()
SFTP_ARGS=()
SSHFS_ARGS=()

UMOUNT=0
QUIET=0
VERBOSE=0

DAEMON=0

POSITIONAL=()
while [[ $# -gt 0 ]]; do
	case $1 in
		-d|--daemon)
			DAEMON=1
			shift
			;;
		-u|--umount)
			UMOUNT=1
			shift
			;;
		-F)
			SSH_ARGS+=("-F")
			SSH_ARGS+=("$2")
			shift
			shift
			;;
		-o)
			if [[ "$(echo $2 | grep -E '^[A-Z]')" != "" ]]; then
				if [[ "$(echo $2 | grep -E '^SSHOPT')" != "" ]]; then
					SSHFS_ARGS+=("-o")
					SSHFS_ARGS+=("$2")
				else
					SSH_ARGS+=("-o")
					SSH_ARGS+=("$2")
				fi
			elif [[ "$(echo $2 | grep -E '^[a-z]')" != "" ]]; then
				if [[ "$2" = "ro" ]]; then
					SFTP_ARGS+=("-R")
				fi

				SSHFS_ARGS+=("-o")
				SSHFS_ARGS+=("$2")
			fi
			shift
			shift
			;;
		-h|--help)
			help
			exit 0
			;;
		-q|--quiet)
			QUIET=1
			shift
			;;
		-v|--verbose)
			VERBOSE=1
			shift
			;;
		*)
			if [[ $UMOUNT -eq 0 && "$LOCAL_PATH" = "" ]]; then
				LOCAL_PATH="$1"
			elif [[ "$REMOTE_HOST" = "" && "$(echo $1 | grep -F ':')" != "" ]]; then
				REMOTE_HOST=$(echo $1 | cut -d: -f1)
				REMOTE_PATH=$(echo $1 | cut -d: -f2)
			else
				POSITIONAL+=("$1")
			fi
			shift
			;;
	esac
done
set -- "${POSITIONAL[@]}"

if [[ $QUIET -eq 1 ]]; then
	exec 1>/dev/null
	exec 2>/dev/null
elif [[ $VERBOSE -eq 0 ]]; then
	exec 1>/dev/null
fi
exec 3>&1
exec 4>&2

if [[ (( $UMOUNT -eq 0 && (( "$LOCAL_PATH" = "" || "$REMOTE_HOST" = "" || "$REMOTE_PATH" = "" )) )) || (( $UMOUNT -eq 1 && (( "$REMOTE_HOST" = "" || "$REMOTE_PATH" = "" )) )) ]]; then
	printf "Error: missing parameters. See $0 --help\n" >&4
	exit 1;
fi

SSHFS_ARGS+=("-o")
SSHFS_ARGS+=("slave")
echo "${SSHFS_ARGS[@]}"

lpath="$LOCAL_PATH"
rhost="$REMOTE_HOST"
rpath="$REMOTE_PATH"
qrpath="$(quote "$rpath")"

if [[ $UMOUNT -eq 1 ]]; then
	printf "Unmounting '$rhost:$rpath'...\n" >&3
	pid=$(ps axf | awk "/rsshfs.*$rhost:$(echo $rpath | sed 's/\//\\\//g')/" | grep -v "\-u" | awk '{print $1}')
	fifo=/tmp/rsshfs-$pid
	ssh ${SSH_ARGS[@]} -o ConnectTimeout=7 "$rhost" fusermount -u "$qrpath" 1>&3 2>&4
	if [[ -p $fifo ]]; then
		rm -f "$fifo"
	fi
else
	qlpath=$(quote "$lpath")
	printf "Mounting '$lpath' on '$rhost:$rpath'...\n" >&3

	fifo=/tmp/rsshfs-$$

	if [[ -p $fifo ]]; then
		rm -f "$fifo"
	fi

	mkfifo -m600 "$fifo"
	ret=$?
	if [[ $ret -eq 0 ]]; then
		if [[ $DAEMON -eq 1 ]]; then
			(< "$fifo" /usr/lib/openssh/sftp-server ${SFTP_ARGS[@]} |
				ssh ${SSH_ARGS[@]} "$rhost" sshfs ${SSHFS_ARGS[@]} ":$qlpath" "$qrpath" > "$fifo") 1>&3 2>&4 &
		else
			(< "$fifo" /usr/lib/openssh/sftp-server ${SFTP_ARGS[@]} |
				ssh ${SSH_ARGS[@]} "$rhost" sshfs ${SSHFS_ARGS[@]} ":$qlpath" "$qrpath" > "$fifo") 1>&3 2>&4
		fi

		if [[ -p $fifo ]]; then
			rm -f "$fifo"
		fi
	fi
fi
